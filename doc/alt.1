.TH ALT 1
.SH NAME
alt \- find the "alternate path" for the given path
.SH SYNOPSIS
.B alt
[OPTIONS] PATH
.SH DESCRIPTION
.B alt
finds the alternate file for the given PATH based on similarity ranking. For example, if you were in a Ruby project and ran
.B alt
.IR spec/app/queues/fee/user_fee_submission_spec.rb
it would output
.IR app/queues/fee/user_fee_submission.rb.
In this case the alternate for the test file is the implementation file.
.SH OPTIONS
.TP
.BR \-v ", " \-\-version
Output the version of \fBalt\fR
.TP
.BR \-h ", " \-\-help
Output the usage help
.TP
.BR "\fB\-f\fR \fIfile\fR, \fB\-\-file\fR \fIfile\fR"
Read possible alternates from a \fIfile\fR rather than using the default
directory glob technique built into \fBalt\fR. This allows you to improve
performance by reducing the set of possible alternates prior to processing. If
\fIfile\fR is "-" it will read the possible alternates from \fIstdin\fR. The
following is an example of using find, a very common command line utility, to
produce a filtered set of paths and pass them to \fBalt\fR:

    find . -path tags -prune -or -path ./log -prune -or -type f -print | alt -f - spec/lib/foo/api_spec.rb

In the above example it excludes tags and log file paths from the possible
alternate paths and passes the rest into \fBalt\fR.
.SH USE WITH VIM
There's no vim plugin. It may not end up needing one; we'll see. For now, you
can just stick the code below in your \fI.vimrc\fR to invoke \fBalt\fR with
\fI<leader>\fR. Note that \fBalt\fR and the Vim Script example below work in
both the terminal based Vim and GUI based Vim like MacVim.

    " Run a given vim command on the results of alt from a given path.
    " See usage below.
    function! AltCommand(path, vim_command)
      let l:alternate = system("alt " . a:path)
      if empty(l:alternate)
        echo "No alternate file for " . a:path . " exists!"
      else
        exec a:vim_command . " " . l:alternate
      endif
    endfunction

    " Find the alternate file for the current path and open it
    nnoremap <leader>. :w<cr>:call AltCommand(expand('%'), ':e')<cr>

.SH FASTER WITH LESS NOISE
So, \fBalt\fR supports passing the set of possible alternate paths in via
\fISTDIN\fR rather than using the built\-in glob mechanism it provides by
default. This is an extremely powerful feature as it allows you to use an
external tool, like find, to produce a filtered list of possible alternate
paths. Filtering in this manner benefits you in two ways. First it eliminates
noise you don't care about from the possible paths. Second, it reduces the set
of possible paths \fBalt\fR has to process, in turn making \fBalt\fR faster.

The following is how I have \fBalt\fR setup in my vimrc using find to produce
the set of alternate paths.

    " Run a given vim command on the results of alt from a given path.
    " See usage below.
    function! AltCommand(path, vim_command)
      let l:alternate = system("find . -path ./_site -prune -or -path ./target -prune -or -path ./.DS_Store -prune -or -path ./build -prune -or -path ./Carthage -prune -or -path tags -prune -or -path ./tmp -prune -or -path ./log -prune -or -path ./.git -prune -or -type f -print | alt -f - " . a:path)
      if empty(l:alternate)
        echo "No alternate file for " . a:path . " exists!"
      else
        exec a:vim_command . " " . l:alternate
      endif
    endfunction

    " Find the alternate file for the current path and open it
    nnoremap <leader>. :w<cr>:call AltCommand(expand('%'), ':e')<cr>

.SH AUTHOR
Originally written by Andrew De Ponte <cyphactor@gmail.com>.
.SH COPYRIGHT
Copyright (c) 2016, 2017 UpTech Works, LLC

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
