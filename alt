#!/usr/bin/env ruby

require 'optparse'

MIN_CONFIDENCE_THRESHOLD = 0.75
MIN_FILENAME_PERCENTAGE = 0.75
FINAL_MATCH_CONFIDENCE_THRESHOLD = 0.90

class Match
  attr_reader :path, :ref_path

  def initialize(original_path, filename, path)
    @original_path = original_path
    @filename = filename
    @ref_path = path
    @path = path.dup
  end

  def reduce_path
    @path = @path[1..-2] if @path.size > 1
  end

  def clean_path(path)
    return path.gsub(/^(feature|spec|test)\//, '').gsub(/(_spec\.rb|_test\.rb|_steps\.rb)$/, '')
  end

  def score
    @longest_match = find_longest_common_substring(clean_path(@original_path), clean_path(@path))
    return @longest_match.length.to_f/clean_path(@path).length.to_f
  end

  def find_longest_common_substring(s1, s2)
    if (s1 == "" || s2 == "")
      return ""
    end
    m = Array.new(s1.length){ [0] * s2.length }
    longest_length, longest_end_pos = 0,0
    (0 .. s1.length - 1).each do |x|
      (0 .. s2.length - 1).each do |y|
        if s1[x] == s2[y]
          m[x][y] = 1
          if (x > 0 && y > 0)
            m[x][y] += m[x-1][y-1]
          end
          if m[x][y] > longest_length
            longest_length = m[x][y]
            longest_end_pos = x
          end
        end
      end
    end
    return s1[longest_end_pos - longest_length + 1 .. longest_end_pos]
  end
end

def test_file?(original_path)
  original_path.start_with?('features/','test/', 'spec/')
end

def find_matches(filename, original_path)
  raw_matches = nil
  if test_file?(original_path)
    raw_matches = Dir.glob("**/*#{filename}*").reject { |rm| File.directory?(rm) }
    # strip exclude test paths
    raw_matches.reject! { |m| test_file?(m) }
  else
    raw_matches = Dir.glob("features/**/*#{filename}*").reject { |rm| File.directory?(rm) }
    raw_matches.concat(Dir.glob("test/**/*#{filename}*").reject { |rm| File.directory?(rm) })
    raw_matches.concat(Dir.glob("spec/**/*#{filename}*").reject { |rm| File.directory?(rm) })
    raw_matches.uniq!
  end

  raw_matches.delete(original_path) # exclude self

  matches = raw_matches.map { |path| Match.new(original_path, filename, path) }
  return matches.sort { |x,y| y.score <=> x.score }
end

def get_filename_minus_extension(path)
  filename = File.basename(path, ".*") # filename without extension
end

def find_match_with_min_confidence(filename, original_path, sorted_matches)
  cur_filename = filename.dup
  while ((sorted_matches.empty? || sorted_matches.first.score < MIN_CONFIDENCE_THRESHOLD) && (cur_filename.length > filename.length * MIN_FILENAME_PERCENTAGE))
    cur_filename = cur_filename[0..-2]
    cur_filename.gsub!(/_$/, '')
    sorted_matches = find_matches(cur_filename, original_path)
  end
  return sorted_matches
end

def find_best_match(sorted_matches)
  while ((!sorted_matches.empty?) && sorted_matches.first.score < FINAL_MATCH_CONFIDENCE_THRESHOLD && sorted_matches.first.path.length > sorted_matches.first.ref_path.length * MIN_FILENAME_PERCENTAGE)
    sorted_matches.each { |match| match.reduce_path }
    sorted_matches = sorted_matches.sort { |x,y| y.score <=> x.score }
  end
  return sorted_matches
end

def trim_results(sorted_matches)
  sorted_matches.delete_if { |m| m.score < FINAL_MATCH_CONFIDENCE_THRESHOLD }
  sorted_matches
end

module Alt
  class Path < String
    def intialize(path)
      super(path.dup)
      cleanse_path
    end

    def test_file?
      self.start_with?('features/','test/', 'spec/')
    end

    private

    def cleanse_path
      self.gsub!(/^\.\//, '')
    end
  end

  class Cli
    VERSION='0.0.1'

    def initialize(argv: ARGV)
      @argv = argv
      @path = nil
      @options = { :version => false, :stdin => false }
      parse_options
      parse_args
    end

    def run
      display_version and exit 0 if @options[:version]

      puts read_possible_files_from_stdin.inspect and exit 0 if @options[:stdin]

      original_path = ARGV[0].dup
      original_path.gsub!(/^\.\//, '')

      filename = nil
      orig_filename = nil
      sorted_matches = []

      filename = get_filename_minus_extension(original_path)
      orig_filename = filename.dup

      sorted_matches = find_matches(filename, original_path)

      sorted_matches = find_match_with_min_confidence(filename, original_path, sorted_matches)

      sorted_matches = find_best_match(sorted_matches)

      sorted_matches = trim_results(sorted_matches)

      if sorted_matches.empty?
        $stdout.write('')
      else
        $stdout.write(sorted_matches.first.ref_path)
      end

      return 0
    end

    private

    def parse_options
      OptionParser.new do |opts|
        opts.banner = "Usage: alt [options] <path>"

        opts.on('-v', '--version', 'Display version') do
          @options[:version] = true
        end

        opts.on('--', '--', 'Use stdin as possible files') do
          @options[:stdin] = true
        end
      end.parse!
    end

    def parse_args
      @path = Path.new(@argv[0]) if @argv.length > 0
    end

    def display_version
      $stdout.write("act v#{Alt::Cli::VERSION}\n") 
    end

    def read_possible_files_from_stdin
      $stdin.readlines
    end
  end
end

exit Alt::Cli.new.run
